{"version":3,"sources":["MessageActionBar.js","views/InboxView.js","NavBar.js","views/ComposeMessageView.js","AppRouter.js","state/initialState.js","App.js","state/reducer.js","index.js"],"names":["MessageActionBar","selectedMessageIds","useSelector","state","dispatch","useDispatch","noMessagesSelected","length","a","type","className","Tooltip","title","Button","disabled","onClick","id","color","style","marginRight","InboxView","currentUser","flex","display","flexDirection","List","margin","inbox","map","message","MessageCard","e","stopPropagation","includes","toggleMessage","_id","props","sent","dateStr","date","Date","dateString","toString","getDate","split","formatDate","defaultColor","isRead","undefined","ListItem","ListItemIcon","Avatar","backgroundColor","from","slice","ListItemText","maxWidth","userSelect","primary","opacity","fontWeight","subject","secondary","content","ListItemSecondaryAction","NavBar","useState","src","ComposeMessageView","useHistory","composeModalOpen","username","setUsername","setSubject","setContent","status","setStatus","error","Drawer","anchor","open","onClose","LinearProgress","TextField","helperText","marginBottom","value","onChange","target","label","placeholder","variant","fullWidth","FormHelperText","marginTop","AppRouter","initialState","name","store","createStore","currentState","action","user","localStorage","setItem","filter","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39d347e7.chunk.js","sourcesContent":["import { Button, Tooltip } from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport UnreadIcon from '@material-ui/icons/Mail'\nimport ReadIcon from '@material-ui/icons/Drafts'\nimport EditIcon from '@material-ui/icons/Edit'\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport function MessageActionBar() {\n    const selectedMessageIds = useSelector(state => state.selectedMessageIds)\n    const dispatch = useDispatch()\n    const noMessagesSelected = selectedMessageIds.length === 0\n\n    async function deleteMessages() {\n        dispatch({ type: 'DELETE_SELECTED_MESSAGES' })\n    }\n\n    async function markRead() {\n        dispatch({ type: 'MARK_SELECTED_MESSAGES_READ' })\n    }\n\n    async function markUnread() {\n        dispatch({ type: 'MARK_SELECTED_MESSAGES_UNREAD' })\n    }\n\n    return (\n        <div className=\"action-bar\">\n            <Tooltip title=\"Delete\">\n                <Button className=\"action-icon\" disabled={noMessagesSelected} onClick={deleteMessages}>\n                    <DeleteIcon />\n                </Button>\n            </Tooltip>\n            <Tooltip title=\"Mark Unread\">\n                <Button className=\"action-icon\" disabled={noMessagesSelected} onClick={markUnread}>\n                    <UnreadIcon />\n                </Button>\n            </Tooltip>\n            <Tooltip title=\"Mark Read\">\n                <Button className=\"action-icon\" disabled={noMessagesSelected} onClick={markRead}>\n                    <ReadIcon />\n                </Button>\n            </Tooltip>\n            <Button id=\"compose\" color=\"primary\" onClick={() => dispatch({ type: 'OPEN_COMPOSE_MODAL' })}>\n                <EditIcon style={{ marginRight: '0.2em' }} /> COMPOSE\n            </Button>\n        </div>\n    )\n}","import { Avatar, Icon, List, ListItem, ListItemIcon, ListItemText, ListItemSecondaryAction } from \"@material-ui/core\";\nimport CheckIcon from '@material-ui/icons/Check'\n\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { MessageActionBar } from \"../MessageActionBar\";\n\nexport function InboxView() {\n    const currentUser = useSelector(state => state.currentUser)\n    const dispatch = useDispatch()\n    const selectedMessageIds = useSelector(state => state.selectedMessageIds)\n\n    function toggleMessage(id, e) {\n        e.stopPropagation()\n        if (selectedMessageIds.includes(id)) {\n            dispatch({ type: 'UNSELECT_MESSAGE', id })\n        } else {\n            dispatch({ type: 'SELECT_MESSAGE', id })\n        }\n    }\n\n    function unSelectAll() {\n        dispatch({ type: 'UNSELECT_ALL_MESSAGES' })\n    }\n\n    return (\n        <div style={{ flex: 1, display: 'flex', flexDirection: 'column' }}>\n            <MessageActionBar />\n            <div style={{ flex: 1 }} onClick={unSelectAll}>\n                <List className=\"inbox\" style={{ margin: '0 auto 2em auto' }}>\n                    {currentUser.inbox.map(message => (\n                        <MessageCard className=\"email\" key={message._id} message={message} onClick={(e) => toggleMessage(message._id, e)} />\n                    ))}\n                </List>\n            </div>\n        </div>\n    )\n}\n\nfunction MessageCard(props) {\n    const message = props.message\n    const selectedMessageIds = useSelector(state => state.selectedMessageIds)\n    const sent = formatDate(message.sent)\n    const defaultColor = message.isRead ? undefined : '#e0c08b'\n    return (\n        <ListItem onClick={props.onClick}>\n            <ListItemIcon>\n                <Avatar style={{ backgroundColor: selectedMessageIds.includes(message._id) ? '#5D3ED2' : defaultColor }}>\n                    {selectedMessageIds.includes(message._id)\n                        ? <CheckIcon />\n                        : message.from.slice(0, 1)\n                    }\n                </Avatar>\n            </ListItemIcon>\n            <ListItemText\n                style={{ maxWidth: '80%', userSelect: 'none' }}\n                primary={(\n                    <span className=\"subject\" style={{ opacity: message.isRead ? '0.6' : '1', fontWeight: message.isRead ? '200' : '500' }}>\n                        {message.from}: {message.subject}\n                    </span>\n                )}\n                secondary={(\n                    <span className=\"body\" style={{ opacity: message.isRead ? '0.6' : '1', fontWeight: message.isRead ? '100' : '400' }}>\n                        {message.content}\n                    </span>\n                )}\n            />\n            <ListItemSecondaryAction>\n                <ListItemText\n                    secondary={\n                        <span className=\"date\">{sent}</span>\n                    }\n                />\n            </ListItemSecondaryAction>\n        </ListItem>\n    )\n}\n\nfunction formatDate(dateStr) {\n    let date = new Date(dateStr)\n    let dateString = date.toString()\n    return `${date.getDate()} ${dateString.split(' ')[1]}`\n}","import { useState } from 'react'\nimport { Menu, MenuItem, Button } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew';\n\nexport function NavBar() {\n    const currentUser = { name: 'Guest'}\n    const dispatch = useDispatch()\n    const [button, setButton] = useState(null)\n    return (\n        <header>\n            <div>\n                <img src=\"assets/mailbox.png\"/>\n                <h1>HackerMail</h1>\n            </div>\n        </header>\n    )\n}","import { TextField, LinearProgress, FormHelperText, Drawer } from '@material-ui/core'\nimport { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router'\n\nexport function ComposeMessageView() {\n\n    const history = useHistory()\n    const dispatch = useDispatch()\n\n    const composeModalOpen = useSelector(state => state.composeModalOpen)\n\n    const [username, setUsername] = useState('')\n    const [subject, setSubject] = useState('')\n    const [content, setContent] = useState('\\n\\n\\n')\n    const [status, setStatus] = useState(null)\n    const [error, setError] = useState(null)\n\n    async function createAccount() {\n        setUsername('')\n        setSubject('')\n        setContent('\\n\\n\\n')\n        setStatus(null)\n        dispatch({ type: 'CLOSE_COMPOSE_MODAL' })\n    }\n\n    return (\n        <Drawer anchor=\"right\" open={composeModalOpen} onClose={() => dispatch({ type: 'CLOSE_COMPOSE_MODAL' })}>\n            {status === 'pending' &&\n                <LinearProgress />\n            }\n            <div className=\"compose-drawer\">\n                <h2>Compose Message:</h2>\n                <TextField\n                    error={error?.username?.message}\n                    helperText={error?.username?.message}\n                    disabled={status !== null}\n                    style={{ marginBottom: '4%' }}\n                    value={username}\n                    onChange={e => setUsername(e.target.value)}\n                    id=\"username\"\n                    label=\"To\"\n                    placeholder=\"Username\"\n                    variant=\"filled\"\n                    fullWidth={true}\n                    variant=\"outlined\"\n                />\n                <TextField\n                    error={error?.subject?.message}\n                    helperText={error?.subject?.message}\n                    disabled={status !== null}\n                    style={{ marginBottom: '4%' }}\n                    value={subject}\n                    onChange={e => setSubject(e.target.value)}\n                    id=\"subject\"\n                    label=\"Subject\"\n                    variant=\"filled\"\n                    fullWidth={true}\n                    variant=\"outlined\"\n                />\n                <TextField\n                    error={error?.content?.message}\n                    helperText={error?.content?.message}\n                    value={content}\n                    disabled={status !== null}\n                    onChange={e => setContent(e.target.value)}\n                    type=\"content\"\n                    id=\"content\"\n                    label=\"Content\"\n                    variant=\"filled\"\n                    fullWidth={true}\n                    variant=\"outlined\"\n                    multiline={true}\n                />\n                {error?.message &&\n                    <FormHelperText error={true}>\n                        {error.message}\n                    </FormHelperText>\n                }\n                <div style={{ display: 'flex', flexDirection: 'row-reverse', marginTop: '4%' }}>\n                    <button disabled={status !== null} onClick={createAccount}>\n                        Send\n                    </button>\n                </div>\n            </div>\n        </Drawer>\n    )\n}","import { BrowserRouter } from 'react-router-dom'\nimport { Redirect, Route, Switch } from 'react-router'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useEffect } from 'react'\nimport { BACKEND_URL } from './_constants'\nimport { InboxView } from './views/InboxView'\nimport { NavBar } from './NavBar'\nimport { ComposeMessageView } from './views/ComposeMessageView'\n\n\nexport function AppRouter() {\n    return (\n        <>\n            <NavBar />\n            <InboxView />\n            <ComposeMessageView />\n        </>\n    )\n}","export const initialState = {\n    currentUser: {\n        name: 'Guest',\n        inbox: [\n            {\n                _id: 1,\n                subject: 'Welcome!',\n                content: 'Welcome to this demo of a project from the Full Stack extended program! Congratulations on completing the introductory course!',\n                from: 'HackerUSA',\n                sent: new Date,\n                isRead: false\n            },\n            {\n                _id: 2,\n                subject: 'An Urgent Message',\n                content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation',\n                from: 'HackerUSA',\n                sent: new Date,\n                isRead: false\n            },\n            {\n                _id: 3,\n                subject: 'Straight Spam',\n                content: 'Don\\'t event open it',\n                from: 'Spamsalot',\n                sent: new Date,\n                isRead: false\n            },\n            {\n                _id: 4,\n                subject: 'Some Social Media Updates',\n                content: 'That you probably already saw',\n                from: 'Facebook',\n                sent: new Date,\n                isRead: false\n            },\n            {\n                _id: 5,\n                subject: 'Your dependencies are out of date',\n                content: 'And we know you don\\'t care ',\n                from: 'GitHub',\n                sent: new Date,\n                isRead: false\n            },\n            {\n                _id: 6,\n                subject: 'Weekly Apple News Update',\n                content: 'Things are mostly getting worse but at least we have a streaming service now for some reason',\n                from: 'Apple',\n                sent: new Date,\n                isRead: false\n            },\n            {\n                _id: 7,\n                subject: 'Your order is on it\\'s way!',\n                content: 'Thank you for placing your 1,316,033,406th order',\n                from: 'Amazon',\n                sent: new Date,\n                isRead: false\n            }\n        ]\n\n    },\n    composeModalOpen: false,\n    selectedMessageIds: []\n}","import { useEffect } from 'react';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux';\nimport { AppRouter } from './AppRouter'\nimport { initialState } from './state/initialState';\nimport { reducer } from './state/reducer';\n\nconst store = createStore(reducer, initialState)\n\nexport function App() {\n  return (\n    <Provider store={store}>\n        <AppRouter />\n    </Provider>\n  );\n}","\nexport function reducer(currentState, action) {\n\n    switch (action.type) {\n        case 'LOGIN':\n            return {\n                ...currentState,\n                currentUser: action.user\n            }\n        case 'LOGOUT':\n            localStorage.setItem('token', '')\n            return {\n                ...currentState,\n                currentUser: null\n            }\n        case 'OPEN_COMPOSE_MODAL':\n            return {\n                ...currentState,\n                composeModalOpen: true\n            }\n        case 'CLOSE_COMPOSE_MODAL':\n            return {\n                ...currentState,\n                composeModalOpen: false\n            }\n        case 'SELECT_MESSAGE':\n            return {\n                ...currentState,\n                selectedMessageIds: [\n                    ...currentState.selectedMessageIds,\n                    action.id\n                ]\n            }\n        case 'UNSELECT_MESSAGE':\n            return {\n                ...currentState,\n                selectedMessageIds: currentState.selectedMessageIds.filter(id => id != action.id)\n            }\n        case 'UNSELECT_ALL_MESSAGES':\n            return {\n                ...currentState,\n                selectedMessageIds: []\n            }\n        case 'DELETE_SELECTED_MESSAGES':\n            return {\n                ...currentState,\n                selectedMessageIds: [],\n                currentUser: {\n                    ...currentState.currentUser,\n                    inbox: currentState.currentUser.inbox.filter(message => (\n                        !currentState.selectedMessageIds.includes(message._id)\n                    ))\n                }\n            }\n        case 'MARK_SELECTED_MESSAGES_READ':\n            return {\n                ...currentState,\n                currentUser: {\n                    ...currentState.currentUser,\n                    inbox: currentState.currentUser.inbox.map(message => (\n                        !currentState.selectedMessageIds.includes(message._id)\n                            ? message\n                            : {\n                                ...message,\n                                isRead: true\n                            }\n                    ))\n                }\n            }\n        case 'MARK_SELECTED_MESSAGES_UNREAD':\n            return {\n                ...currentState,\n                currentUser: {\n                    ...currentState.currentUser,\n                    inbox: currentState.currentUser.inbox.map(message => (\n                        !currentState.selectedMessageIds.includes(message._id)\n                            ? message\n                            : {\n                                ...message,\n                                isRead: false\n                            }\n                    ))\n                }\n            }\n    }\n\n    return currentState\n}\n\n// ","import React from 'react';\nimport './index.css'\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}